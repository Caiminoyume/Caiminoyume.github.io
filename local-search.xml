<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>fullcone-nat模式下提供web服务</title>
    <link href="/posts/fullcone-nat%E6%A8%A1%E5%BC%8F%E4%B8%8B%E6%8F%90%E4%BE%9Bweb%E6%9C%8D%E5%8A%A1/"/>
    <url>/posts/fullcone-nat%E6%A8%A1%E5%BC%8F%E4%B8%8B%E6%8F%90%E4%BE%9Bweb%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<p>老实说，3202 年要提供使用家里云对外提供 web服务，直接用 ipv6 就好了</p><p>事实上，我本来也是如此，但毕竟还是要和某些只有 ipv4 的“小可爱”做朋友的，在受够了教别人如何开启 ipv6 后，我决定寻求无公网  ipv4 支持家里云双栈访问的方法</p><h1 id="探索和理论"><a href="#探索和理论" class="headerlink" title="探索和理论"></a>探索和理论</h1><h3 id="方案选择"><a href="#方案选择" class="headerlink" title="方案选择"></a>方案选择</h3><p>我家里是移动宽带，申请公网 ipv4 是不用想了</p><p>那么，一种简单的想法是通过一台双栈的主机以实现 <code>4to6</code> 的转换</p><p>但鉴于国内云服务器的“小水管”，不足以满足我 NAS 高带宽的需求，并且还有备案的麻烦事，很快被我 pass 了</p><p>然后是国外主机，虽然支持高带宽的传输，但流量要从国内-&gt;国外-&gt;国外的转发，延迟爆炸，实在不甚优雅，同时也要每月付出一笔不菲的费用<br><del>还有可能由于某些原因被阻断</del></p><p>我也考虑过套 cloudflare 回源家里云，不得不说这是一场灾难，打开 web 基本都要十几秒，速度也是十分堪忧，<del>非常符合我对流量经过国外的想象</del><br>并且 cloudflare 作为 CDN 服务器能解密中间所有流量，即使 cloudflare 声称保护互联网隐私，但对于家里云里的私密信息，果然还是放心不下</p><p>难道真的没有完美的方案了吗？</p><h3 id="NAT-穿越"><a href="#NAT-穿越" class="headerlink" title="NAT 穿越"></a>NAT 穿越</h3><p>一次机缘巧合，我注意到了家里的移动宽带使用的是 <code>fullcone</code>，也就是所谓的 <code>nat1</code></p><blockquote><p>至于什么是 nat 类型，可自行搜索，此处不赘述</p></blockquote><p>这给我极大的希望，因为 nat1 几乎和公网 ipv4 无异，很快我找到了 nat 打洞的方案：<a href="https://github.com/heiher/natmap">natmap</a></p><p>不过，在这个项目的 wiki 里，我只找到了一种非常不优雅的<a href="https://github.com/heiher/natmap/wiki/web">解决方法</a>，它依然依赖 cloudflare的反代<br><del>如果一定要经过 cf，直接用 cf tunnel 不就得了，还打什么洞啊</del></p><p>当然，它依然十分有用，<code>natmap</code> 已经实现 NAT 穿越，上面的套 cloudflare 方案不过为了解决动态端口的问题，只是这点令我不甚满意</p><h3 id="动态端口问题"><a href="#动态端口问题" class="headerlink" title="动态端口问题"></a>动态端口问题</h3><p>我们都知道，动态 IP 可以靠 DDNS 解决，但是端口却不在 DNS 的范畴</p><blockquote><p>虽然 HTTPS 记录已经出现 port 键，但几乎所有的客户端都不支持</p></blockquote><p>那么，使用 302 重定向呢？</p><p>当这个想法从脑海中闪现时，我立刻兴奋起来：是的，302 重定向可以让将访问重定向并带上端口号</p><p>以下是网络架构的思路：</p><ol><li>natmap 实现 NAT 穿越，并获取 NAT 出口的 IP 和端口</li><li>IP 使用 DDNS 绑定域名<code>v4.homecloud.com</code>，端口上报到 302 服务器<code>302.cloudhome.com</code></li><li>302 服务器将每个访问<code>https://302.homg.cloud/path?search=</code> 302 跳转到 <code>https://v4.homecloud.com:$&#123;port&#125;/path?search=</code></li></ol><p>注意到 302 服务器仅完成 302 跳转，所以无论使用国内云服务器（低延迟小带宽），还是国外服务器（高延迟），都不影响访问体验！</p><p>当然，我决定更进一步，302 这点事完全可以交给 cloudflare workers</p><h1 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h1><blockquote><p>假设家里云在 2023 端口提供 web 服务</p></blockquote><h3 id="配置-cloudflare-workers"><a href="#配置-cloudflare-workers" class="headerlink" title="配置 cloudflare workers"></a>配置 cloudflare workers</h3><p>workers 本来并没有存储功能，好在 cloudflare 给了另一项功能：KV空间</p><ol><li>创建一个 workers 项目 <code>homecloud</code> 和一个 KV 空间 <code>hc</code></li><li>将 <code>hc</code> 绑定至 <code>homecloud</code> 并命名为 <code>nat_port</code></li><li>绑定域名 <code>302.homecloud.com</code> 至 <code>homecloud</code></li><li>然后在 <code>homecloud</code> 内编辑以下代码：<figure class="highlight javascript"><figcaption><span>cloudflare-workers</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-keyword">async</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-params">request, env</span>) &#123;<br>        <span class="hljs-keyword">const</span> &#123; pathname, search &#125; = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(request.<span class="hljs-property">url</span>);<br>        <span class="hljs-comment">// 提交端口到 KV 空间</span><br>        <span class="hljs-keyword">if</span> (pathname === <span class="hljs-string">&quot;/port&quot;</span>) &#123;<br>            <span class="hljs-keyword">if</span> (request.<span class="hljs-property">method</span> === <span class="hljs-string">&quot;POST&quot;</span>) &#123;<br>                <span class="hljs-keyword">const</span> port = <span class="hljs-keyword">await</span> request.<span class="hljs-title function_">json</span>();<br>                <span class="hljs-keyword">await</span> env.<span class="hljs-property">nat_port</span>.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;port&quot;</span>, port);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(port, &#123;<br>                    <span class="hljs-attr">headers</span>: &#123; <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span> &#125;,<br>                &#125;);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (request.<span class="hljs-property">method</span> === <span class="hljs-string">&quot;GET&quot;</span>) &#123;<br>                <span class="hljs-keyword">const</span> value = <span class="hljs-keyword">await</span> env.<span class="hljs-property">nat_port</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;port&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(value);<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(<span class="hljs-string">&quot;error! &quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 如果访问者支持 ipv6，则跳转至 ipv6 域名</span><br>        <span class="hljs-keyword">const</span> ip = <span class="hljs-title class_">String</span>(request.<span class="hljs-property">headers</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;CF-Connecting-IP&#x27;</span>));<br>        <span class="hljs-keyword">if</span> (ip.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;:&quot;</span>)) &#123;<br>            <span class="hljs-keyword">const</span> v6 = <span class="hljs-string">&quot;https://v6.homecloud.com:2023&quot;</span>;<br>            <span class="hljs-keyword">const</span> statusCode = <span class="hljs-number">302</span>;<br>            <span class="hljs-keyword">const</span> destinationURL = <span class="hljs-string">`<span class="hljs-subst">$&#123;v6&#125;</span><span class="hljs-subst">$&#123;pathname&#125;</span><span class="hljs-subst">$&#123;search&#125;</span>`</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">Response</span>.<span class="hljs-title function_">redirect</span>(destinationURL, statusCode);<br>        &#125;<br>        <span class="hljs-comment">// 否则，跳转至 nat 域名</span><br>        <span class="hljs-keyword">const</span> port = <span class="hljs-keyword">await</span> env.<span class="hljs-property">nat_port</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;port&quot;</span>);<br>        <span class="hljs-keyword">const</span> v4 = <span class="hljs-string">&quot;https://v4.homecloud.com:&quot;</span>;<br>        <span class="hljs-keyword">const</span> statusCode = <span class="hljs-number">302</span>;<br>        <span class="hljs-keyword">const</span> destinationURL = <span class="hljs-string">`<span class="hljs-subst">$&#123;v4&#125;</span><span class="hljs-subst">$&#123;port&#125;</span><span class="hljs-subst">$&#123;pathname&#125;</span><span class="hljs-subst">$&#123;search&#125;</span>`</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Response</span>.<span class="hljs-title function_">redirect</span>(destinationURL, statusCode);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意将域名和端口替换成你自己的</p></blockquote></li></ol><h3 id="配置-natmap"><a href="#配置-natmap" class="headerlink" title="配置 natmap"></a>配置 natmap</h3><ol><li>新建脚本 <code>/usr/bin/nat-port</code>，并填入以下内容</li><li>在 openwrt 中运行命令：<code>natmap -d -i pppoe-wan -s stunserver.stunprotocol.org -h qq.com -b 2023 -e /usr/bin/nat-port</code><figure class="highlight bash"><figcaption><span>nat-port</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><br><span class="hljs-comment"># 端口上报至 cloudflare workers</span><br>ADDR=<span class="hljs-variable">$&#123;1&#125;</span><br>PORT=<span class="hljs-variable">$&#123;2&#125;</span><br>WORKERS=<span class="hljs-string">&quot;302.homecloud.com&quot;</span><br><br>curl -X <span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-string">&quot;https://<span class="hljs-variable">$WORKERS</span>/port&quot;</span> \<br>     -H <span class="hljs-string">&quot;Content-Type: application/json; charset=utf-8&quot;</span> \<br>     -d <span class="hljs-string">&quot;<span class="hljs-variable">$PORT</span>&quot;</span><br><br><span class="hljs-comment"># DDNS</span><br>CFKEY=<span class="hljs-string">&quot;your cloudflare API key&quot;</span><br>CFUSER=<span class="hljs-string">&quot;&quot;</span><br><br>CFZONE_NAME=<span class="hljs-string">&quot;homecloud.com&quot;</span><br><span class="hljs-comment"># run</span><br><span class="hljs-comment"># curl -s -X GET &quot;https://api.cloudflare.com/client/v4/zones?name=$CFZONE_NAME&quot; -H &quot;X-Auth-Email: $CFUSER&quot; -H &quot;X-Auth-Key: $CFKEY&quot; -H &quot;Content-Type: application/json&quot;</span><br><span class="hljs-comment"># to get this ID</span><br>CFZONE_ID=<span class="hljs-string">&quot;&quot;</span><br><br>CFRECORD_NAME=<span class="hljs-string">&quot;v4.homecloud.com&quot;</span><br><span class="hljs-comment"># run</span><br><span class="hljs-comment"># curl -s -X GET &quot;https://api.cloudflare.com/client/v4/zones/$CFZONE_ID/dns_records?name=$CFRECORD_NAME&quot; -H &quot;X-Auth-Email: $CFUSER&quot; -H &quot;X-Auth-Key: $CFKEY&quot; -H &quot;Content-Type: application/json&quot;</span><br><span class="hljs-comment"># to get this ID</span><br>CFRECORD_ID=<span class="hljs-string">&quot;&quot;</span><br>CFRECORD_TYPE=A<br>CFTTL=120<br><br>RESPONSE=$(curl -s -X PUT <span class="hljs-string">&quot;https://api.cloudflare.com/client/v4/zones/<span class="hljs-variable">$CFZONE_ID</span>/dns_records/<span class="hljs-variable">$CFRECORD_ID</span>&quot;</span> \<br>  -H <span class="hljs-string">&quot;X-Auth-Email: <span class="hljs-variable">$CFUSER</span>&quot;</span> \<br>  -H <span class="hljs-string">&quot;X-Auth-Key: <span class="hljs-variable">$CFKEY</span>&quot;</span> \<br>  -H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> \<br>  --data <span class="hljs-string">&quot;&#123;\&quot;id\&quot;:\&quot;<span class="hljs-variable">$CFZONE_ID</span>\&quot;,\&quot;type\&quot;:\&quot;<span class="hljs-variable">$CFRECORD_TYPE</span>\&quot;,\&quot;name\&quot;:\&quot;<span class="hljs-variable">$CFRECORD_NAME</span>\&quot;,\&quot;content\&quot;:\&quot;<span class="hljs-variable">$ADDR</span>\&quot;, \&quot;ttl\&quot;:<span class="hljs-variable">$CFTTL</span>&#125;&quot;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>注意填入必要的信息</p></blockquote></li></ol>]]></content>
    
    
    <categories>
      
      <category>技巧分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Network</tag>
      
      <tag>NAT</tag>
      
      <tag>Fullcone</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我有特殊的透明代理配置和使用技巧</title>
    <link href="/posts/%E6%88%91%E6%9C%89%E7%89%B9%E6%AE%8A%E7%9A%84%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <url>/posts/%E6%88%91%E6%9C%89%E7%89%B9%E6%AE%8A%E7%9A%84%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<p>鉴于大部分人在透明代理中对 DNS 的行为一知半解，而 DNS 作为互联网连接的第一步，却被许多人一直忽视，令我感到十分不可思议。合理的 DNS 处理不仅能提高核心性能，防止代理 BT 流量，<del>甚至能绕过 GFW 的封锁，实现 no-proxy 访问</del>（本文并未涉及，敬请期待之后的文章）</p><h1 id="讨论的范围"><a href="#讨论的范围" class="headerlink" title="讨论的范围"></a>讨论的范围</h1><ul><li>假设需要做 <code>proxy</code> <code>direct</code> <code>block</code> 三种类型的分流，且已有完善的 <code>geosite</code></li><li>本文仅讨论<code>透明代理</code>下 <code>HTTP(S)</code> 访问的情况</li><li>假设读者具备<code>普通网络环境</code>下访问网站和<code>透明代理下发起 DNS 请求的时机</code>的知识</li></ul><h1 id="在发起连接之前"><a href="#在发起连接之前" class="headerlink" title="在发起连接之前"></a>在发起连接之前</h1><p>当你在浏览器输入一个域名时会发生什么？首先当然是 DNS 查询。其中浏览器会同时向系统配置的DNS服务器发起三条 DNS 请求：A 记录，AAAA 记录，和 HTTPS 记录</p><blockquote><p>如果不了解 HTTPS 记录，可以参考 <a href="https://taoshu.in/dns/dns-svcb-https.html">这篇文章</a></p></blockquote><p>总结一下，A&#x2F;AAAA 记录获取域名的 ipv4 和 ipv6 地址，HTTPS 记录获取域名的 alpn 和 ECH 信息</p><h1 id="传统透明代理的局限性"><a href="#传统透明代理的局限性" class="headerlink" title="传统透明代理的局限性"></a>传统透明代理的局限性</h1><p>大部分人透明代理的网络拓扑可能类似这样：<br><img src="/img/%E7%BD%91%E7%BB%9C%E6%8B%93%E6%89%911.png" alt="网络拓扑1"><br>注意到一些本无需经过 core 的流量进入了 core，增大了性能消耗<br>同时，劫持所有流量也会劫持到 BT 流量，以至于不得不采取其他方式规避</p><blockquote><p>为什么不推荐代理 BT 流量可自行搜索</p></blockquote><h1 id="一点特殊的技巧"><a href="#一点特殊的技巧" class="headerlink" title="一点特殊的技巧"></a>一点特殊的技巧</h1><p>由于 HTTP(S) 访问之前基本都会发起 DNS 查询，因此使用 fakeip 不仅可以避免不必要的 DNS 查询，同时可避免 core 劫持额外的流量带来的性能消耗<br>如下图所示：<br><img src="/img/%E7%BD%91%E7%BB%9C%E6%8B%93%E6%89%912.png" alt="网络拓扑2"><br>注意到在此种模式下，block流量直接在本机处理，direct 流量也直接经路由器（而不是 core）转发到外网，大大减少 core 的处理压力<br>同时，BT 流量因为既不会发起 DNS 请求，也不会出现在 fakeip 段内，自然也不会经过 core！</p><h1 id="如何实践？"><a href="#如何实践？" class="headerlink" title="如何实践？"></a>如何实践？</h1><p>下面以 sing-box 为例，进行实操：</p><p>以下是 iptables 示例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip rule add fwmark 1 table 100<br>ip route add <span class="hljs-built_in">local</span> 0.0.0.0/0 dev lo table 100<br>iptables -t mangle -N SINGBOX<br>iptables -t mangle -A SINGBOX -m mark --mark 2 -j RETURN<br>iptables -t mangle -A SINGBOX -p udp --dport 53 -j TPROXY --on-port 12345 --tproxy-mark 1<br>iptables -t mangle -A SINGBOX -p tcp --dport 53 -j TPROXY --on-port 12345 --tproxy-mark 1<br>iptables -t mangle -A SINGBOX -d 127.0.0.0/8 -j RETURN<br>iptables -t mangle -A SINGBOX -d 198.18.0.0/16 -p tcp -j TPROXY --on-port 12345 --tproxy-mark 1<br>iptables -t mangle -A SINGBOX -d 198.18.0.0/16 -p udp -j TPROXY --on-port 12345 --tproxy-mark 1<br>iptables -t mangle -A PREROUTING -j SINGBOX<br><br>iptables -t mangle -N SINGBOX_SELF<br>iptables -t mangle -A SINGBOX_SELF -m mark --mark 2 -j RETURN<br>iptables -t mangle -A SINGBOX_SELF -d 198.18.0.0/16 -p udp -j MARK --set-mark 1<br>iptables -t mangle -A SINGBOX_SELF -d 198.18.0.0/16 -p tcp -j MARK --set-mark 1<br>iptables -t mangle -A OUTPUT -j SINGBOX_SELF<br><br>ip -6 rule add fwmark 1 table 106<br>ip -6 route add <span class="hljs-built_in">local</span> ::/0 dev lo table 106<br>ip6tables -t mangle -N SINGBOX6<br>ip6tables -t mangle -A SINGBOX6 -m mark --mark 2 -j RETURN<br>ip6tables -t mangle -A SINGBOX6 -p udp --dport 53 -j TPROXY --on-port 12345 --tproxy-mark 1<br>ip6tables -t mangle -A SINGBOX6 -p tcp --dport 53 -j TPROXY --on-port 12345 --tproxy-mark 1<br>ip6tables -t mangle -A SINGBOX6 -d ::1/128 -j RETURN<br>ip6tables -t mangle -A SINGBOX6 -d fc00::/18 -p tcp -j TPROXY --on-port 12345 --tproxy-mark 1<br>ip6tables -t mangle -A SINGBOX6 -d fc00::/18 -p udp -j TPROXY --on-port 12345 --tproxy-mark 1<br>ip6tables -t mangle -A PREROUTING -j SINGBOX6<br><br>ip6tables -t mangle -N SINGBOX6_SELF<br>ip6tables -t mangle -A SINGBOX6_SELF -m mark --mark 2 -j RETURN<br>ip6tables -t mangle -A SINGBOX6_SELF -d fc00::/18 -p udp -j MARK --set-mark 1<br>ip6tables -t mangle -A SINGBOX6_SELF -d fc00::/18 -p tcp -j MARK --set-mark 1<br>ip6tables -t mangle -A OUTPUT -j SINGBOX6_SELF<br></code></pre></td></tr></table></figure><p>以下是 sing-box 配置示例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;dns&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;servers&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;fakeip&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;fakeip&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;local-dns&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;detour&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;direct-out&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ali-dns&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;223.5.5.5&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;detour&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;direct-out&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;block-dns&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rcode://success&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;rules&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;outbound&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;server&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ali-dns&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;geosite&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;category-ads-all&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;server&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;block-dns&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;geosite&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cn&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;server&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ali-dns&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;query_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                    <span class="hljs-string">&quot;A&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-string">&quot;AAAA&quot;</span><br>                <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;server&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;fakeip&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;final&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;local-dns&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;reverse_mapping&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;fakeip&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;inet4_range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;198.18.0.0/16&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;inet6_range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;fc00::/18&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;route&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;rules&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dns&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;outbound&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dns-out&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;final&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;proxy&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;default_mark&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;inbounds&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tproxy-in&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tproxy&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;listen&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;::&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;listen_port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">12345</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;sniff&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;outbounds&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;proxy&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-comment">// 略</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;direct-out&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;direct&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dns-out&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dns&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><h3 id="代理telegram"><a href="#代理telegram" class="headerlink" title="代理telegram"></a>代理telegram</h3><p>由于某些即时通讯工具（QQ、telegram）内置了 IP，不发起 DNS 查询，对于要代理 telegram 的情况，请加入以下设置：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">iptables</span> -t mangle -A SINGBOX -d <span class="hljs-number">91.105.192.0</span>/<span class="hljs-number">23</span> -p tcp -j TPROXY --<span class="hljs-literal">on</span>-port <span class="hljs-number">12345</span> --tproxy-mark <span class="hljs-number">1</span><br><span class="hljs-attribute">iptables</span> -t mangle -A SINGBOX -d <span class="hljs-number">91.108.4.0</span>/<span class="hljs-number">22</span> -p tcp -j TPROXY --<span class="hljs-literal">on</span>-port <span class="hljs-number">12345</span> --tproxy-mark <span class="hljs-number">1</span><br><span class="hljs-attribute">iptables</span> -t mangle -A SINGBOX -d <span class="hljs-number">91.108.8.0</span>/<span class="hljs-number">21</span> -p tcp -j TPROXY --<span class="hljs-literal">on</span>-port <span class="hljs-number">12345</span> --tproxy-mark <span class="hljs-number">1</span><br><span class="hljs-attribute">iptables</span> -t mangle -A SINGBOX -d <span class="hljs-number">91.108.16.0</span>/<span class="hljs-number">21</span> -p tcp -j TPROXY --<span class="hljs-literal">on</span>-port <span class="hljs-number">12345</span> --tproxy-mark <span class="hljs-number">1</span><br><span class="hljs-attribute">iptables</span> -t mangle -A SINGBOX -d <span class="hljs-number">91.108.56.0</span>/<span class="hljs-number">22</span> -p tcp -j TPROXY --<span class="hljs-literal">on</span>-port <span class="hljs-number">12345</span> --tproxy-mark <span class="hljs-number">1</span><br><span class="hljs-attribute">iptables</span> -t mangle -A SINGBOX -d <span class="hljs-number">95.161.64.0</span>/<span class="hljs-number">20</span> -p tcp -j TPROXY --<span class="hljs-literal">on</span>-port <span class="hljs-number">12345</span> --tproxy-mark <span class="hljs-number">1</span><br><span class="hljs-attribute">iptables</span> -t mangle -A SINGBOX -d <span class="hljs-number">149.154.160.0</span>/<span class="hljs-number">20</span> -p tcp -j TPROXY --<span class="hljs-literal">on</span>-port <span class="hljs-number">12345</span> --tproxy-mark <span class="hljs-number">1</span><br><span class="hljs-attribute">iptables</span> -t mangle -A SINGBOX -d <span class="hljs-number">185.76.151.0</span>/<span class="hljs-number">24</span> -p tcp -j TPROXY --<span class="hljs-literal">on</span>-port <span class="hljs-number">12345</span> --tproxy-mark <span class="hljs-number">1</span><br><span class="hljs-attribute">ip6tables</span> -t mangle -A SINGBOX6 -d <span class="hljs-number">2001</span>:<span class="hljs-number">67</span>c:<span class="hljs-number">4</span>e8::/<span class="hljs-number">48</span> -p tcp -j TPROXY --<span class="hljs-literal">on</span>-port <span class="hljs-number">12345</span> --tproxy-mark <span class="hljs-number">1</span><br><span class="hljs-attribute">ip6tables</span> -t mangle -A SINGBOX6 -d <span class="hljs-number">2001</span>:b28:f23c::/<span class="hljs-number">47</span> -p tcp -j TPROXY --<span class="hljs-literal">on</span>-port <span class="hljs-number">12345</span> --tproxy-mark <span class="hljs-number">1</span><br><span class="hljs-attribute">ip6tables</span> -t mangle -A SINGBOX6 -d <span class="hljs-number">2001</span>:b28:f23f::/<span class="hljs-number">48</span> -p tcp -j TPROXY --<span class="hljs-literal">on</span>-port <span class="hljs-number">12345</span> --tproxy-mark <span class="hljs-number">1</span><br><span class="hljs-attribute">ip6tables</span> -t mangle -A SINGBOX6 -d <span class="hljs-number">2</span>a0a:f280::/<span class="hljs-number">32</span> -p tcp -j TPROXY --<span class="hljs-literal">on</span>-port <span class="hljs-number">12345</span> --tproxy-mark <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="DNS-泄露"><a href="#DNS-泄露" class="headerlink" title="DNS 泄露"></a>DNS 泄露</h3><p>本配置实际存在 DNS 泄露问题，猜猜是哪个记录漏了？</p><p>至于为什么设置<code>&quot;final&quot;: &quot;local-dns&quot;</code>，主要是为了解析 PTR 记录，也是泄露的原因所在</p>]]></content>
    
    
    <categories>
      
      <category>技巧分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Network</tag>
      
      <tag>Tproxy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>http3直连YouTube观影？</title>
    <link href="/posts/http3%E7%9B%B4%E8%BF%9EYouTube%E8%A7%82%E5%BD%B1%EF%BC%9F/"/>
    <url>/posts/http3%E7%9B%B4%E8%BF%9EYouTube%E8%A7%82%E5%BD%B1%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>老实说，我本不打算写这篇博客的：因为没有推广的价值，它本质是利用了 GFW 的一个漏洞，如果这漏洞被修复，该方法自然失效</p><p>但是我在谷歌对应资料的时候，意外地了解到这个“漏洞”<a href="https://www.v2ex.com/t/370189?p=1">历史意外的悠久？</a>，居然能追溯到 2017 年。看来此方法可能能使用很长一段时间，因此写下此文。<del>反正我的博客也没什么人看</del></p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>要说这个漏洞也简单，GFW 没有阻断 QUIC 流量的 YouTube 视频流的域名(googlevideo.com)，根据 GFW 目前的手段来看，此域名处于如下状态：</p><table><thead><tr><th>DNS 污染</th><th>路由黑洞</th><th>TLS SNI 阻断</th><th>QUIC SNI 阻断</th></tr></thead><tbody><tr><td>yes</td><td>no</td><td>yes</td><td>no</td></tr></tbody></table><blockquote><p>9月25日补充：该域名下部分 ipv4 是路由黑洞，建议 DNS 模块只返回 ipv6 的地址</p></blockquote><p>这就给了我们钻漏洞的机会：</p><ol><li>开启浏览器的 QUIC 支持</li><li>使用未被污染的 DNS<br>这样视频流的流量就会通过 QUIC 直连到 YouTube 的 CDN</li></ol><p>不过很遗憾，普通的 HTTP 代理或者 socks 代理均不支持代理 QUIC 流量，当浏览器启用了代理，就不会尝试使用 QUIC 进行连接，因此浏览器一定要保持没有代理的状态</p><p>不过浏览器不代理，显然是打不开 YouTube 的，那视频流也无从谈起了，这样变成了先有鸡还是先有蛋的问题了。有没有一种情况能仅代理 <code>www.youtube.com</code> 而不代理 <code>*.googlevideo.com</code> 且不开启系统代理的呢</p><p>这就是透明代理了，在使用 tun&#x2F;tproxy 的情况下，处理 DNS 请求并分流这两个域名，便可实现</p><h1 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h1><h2 id="启用-QUIC"><a href="#启用-QUIC" class="headerlink" title="启用 QUIC"></a>启用 QUIC</h2><p>如果你使用 edge 浏览器，在地址栏输入 <a href="edge://flags">edge:&#x2F;&#x2F;flags</a>，并在随后出现页面的搜索栏里键入 <code>quic</code>，找到 <code>Experimental QUIC protocol</code> 项设置为 <code>Enabled</code> 并重启浏览器<br>如果你使用 chrome 浏览器，只需输入 <a href="chrome://flags">chrome:&#x2F;&#x2F;flags</a>，其余操作与上述相同</p><h2 id="使用未污染的-DNS"><a href="#使用未污染的-DNS" class="headerlink" title="使用未污染的 DNS"></a>使用未污染的 DNS</h2><p>在使用 tun&#x2F;tproxy 时，浏览器首先会发起 DNS 请求再开始连接，GFW 通过返回虚假的 IP 地址来阻断对被墙的域名的访问（DNS 污染）。通过 tun&#x2F;tproxy 处理 DNS 请求，使其获取“干净”的 IP。可以考虑使用 DoT 或者 DoH，或者直接代理 DNS 请求，避免 GFW 污染 DNS 查询结果</p><p>如果你时 tproxy 的玩家，想必都不用我说已经知道怎么做了；下面主要说一下 tun 模式的玩法</p><p>tun 是一种仅单机的提供透明代理的方式，在某些软件并不会遵循系统代理的情况下，使用 tun 强制其流量进入代理软件，便是 tun 最强大的地方（如果你的节点延迟很低，并且在玩外服游戏，就可以考虑使用 tun 代理游戏流量，降低延迟）</p><p>首先确认你使用的代理工具是否支持 tun （clashforwindows和v2rayN）均支持开启 tun 模式。开启 tun 的操作自行谷歌，此处不再赘述</p><p>在 tun 模式下，尤其需要注意 DNS 的处理，注意不要将 <code>*.googlevideo.com</code> 的域名使用国内的 DNS 进行查询（哪怕它是 DoT&#x2F;DoH），可以使用 <code>dns.google</code> 的 DoT （<code>dns.google</code> 据说可以直连了，不过还是得根据地区和以后 GFW 的政策来看，如果不行，就代理 DNS 查询）</p><p>如此，即获取到真正的 <code>*.googlevideo.com</code> 的 IP 地址</p><h2 id="附"><a href="#附" class="headerlink" title="附"></a>附</h2><p>如果你确保上述操作正确的话（特别注意关闭系统代理），如果打开 YouTube 的视频一直无法加载，可能浏览器依然首先尝试了一般的 TLS 连接，具体无法确定原因，解决方法暂无（多刷新几次&#x2F;重启浏览器&#x2F;重启电脑 可能在某次就进行 QUIC 连接了），不过一旦浏览器开始 QUIC 连接后，后续非常稳定</p><h1 id="优点和缺点？"><a href="#优点和缺点？" class="headerlink" title="优点和缺点？"></a>优点和缺点？</h1><p>一个必然的事实是，由于你直连了 YouTube 的 CDN，对有区域版权限制的媒体自然是无法访问的，不过也正是这一点，在谷歌大肆反广告的如今，反而因为 cn 地区无业务而自然无广告</p><p>如果你是自建节点，单点大流量的特征是无论如何无法避免的，将 YouTube 视频流量直连，可减少经过代理的流量，降低风险</p><p>而如果你节点速度不佳，直连 YouTube 可能大幅提升观影体验（如果 YouTube 给你分配了 HK 的 CDN 的话，甚至能跑到 20w+，不过目前分配机制较迷，有时也会分配荷兰或者洛杉矶等地的 CDN） </p>]]></content>
    
    
    <categories>
      
      <category>记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Network</tag>
      
      <tag>QUIC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TLS 技术鉴赏 —— 1. TLS 的基本原理</title>
    <link href="/posts/TLS%20%E6%8A%80%E6%9C%AF%E9%89%B4%E8%B5%8F%20%E2%80%94%E2%80%94%201.%20TLS%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/"/>
    <url>/posts/TLS%20%E6%8A%80%E6%9C%AF%E9%89%B4%E8%B5%8F%20%E2%80%94%E2%80%94%201.%20TLS%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近一直在看关于网络通信的书，正好趁此博客刚刚开站，打算写一系列的文章。若是没人看，权当作笔记了吧。<del>说不定几篇之后就没动力写了</del></p><p>其实网络通信可讲的太多，不过笔者认为，研究网络安全，在攻防角色间相互代换，可称为颇有一番乐趣的智力游戏。于是乎，第一篇的主题就定下来了</p><p>要讨论通信安全，那就不得不先谈密码学了，要达成安全的目的，必然与密码有千丝万缕的联系。不过本篇由于只讲基本原理，并不会对具体的密码算法有过多的讲解，针对下面要讲到的加密方式，将其理解为概念上完美的加密方式即可（即，在不知道密钥的前提下，绝无可能破译）</p><h1 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h1><h3 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法"></a>对称加密算法</h3><p>对称加密很好理解，即双方使用同样的密钥进行加密和解密。用数学的语言表述如下：</p><p>$c&#x3D;K(p)$<br>$K(c)&#x3D;K(K(p))&#x3D;p$</p><p>上述式子中，$p$ 即明文（plaintext），$c$ 即密文（ciphertext），$K$ 即密钥（key），通过密钥对明文加密得到密钥</p><h3 id="不对称加密算法"><a href="#不对称加密算法" class="headerlink" title="不对称加密算法"></a>不对称加密算法</h3><p>不对称加密具有一种特殊的性质，即它使用一个密钥对，私钥加密而公钥解密，公钥加密而私钥解密，公钥&#x2F;私钥都无法对自己加密的内容解密<br>再一次，用数学的语言表达如下：</p><p>$K^+(K^-(p))&#x3D;p$<br>$K^-(K^+(p))&#x3D;p$</p><p>在数学上，密钥对实际没有区别，习惯上，我们将公开出去的密钥叫公钥（publickey），而自己持有的密钥叫私钥（privatekey），式子中，将公钥用 $K^+$ 表示，私钥用 $K^-$ 表示</p><ul><li>由于不对称加密算法资源消耗大，实践中一般不直接用来加密报文，而是用来传递对称加密的密钥</li></ul><h3 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h3><p>虽然哈希算法不能叫加密算法，但它在验证原文的完整性时非常重要，也是通信安全中必不可少的一位，因此将它放在这里<br>哈希算法具有这些性质：</p><ol><li>对于任意报文 $m$，都能生成固定长度的字符串（哈希值） $H(m)$</li><li>对于相同的报文 $m$，总是能生成相同的哈希值 $H(m)$</li><li>找到任意两个不同的报文 $x$ 和 $y$，使 $H(x)&#x3D;H(y)$，在计算上是不可能的</li></ol><p>显然哈希算法的输入和输出不是一一对应的，必然会有相当多的报文 $m_1,m_2,\ldots$ 的哈希值相同（这种现象被称为<strong>哈希碰撞</strong>），只是我们无法在合理的时间内根据 $m_1$ 去计算其他和它哈希值相等的报文。这也正是第三条表达的意思</p><h3 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h3><p>数字签名是由哈希算法和不对称加密算法结合起来的产物。签名者将报文的哈希值用自己的私钥加密（该加密数据即为<strong>数字签名</strong>），并同报文一起发送给接受者。接受者使用公钥解密，并验证哈希值，即可知晓报文是否被篡改以及验证发送者的身份</p><h3 id="一条加密隧道应该具有的性质"><a href="#一条加密隧道应该具有的性质" class="headerlink" title="一条加密隧道应该具有的性质"></a>一条加密隧道应该具有的性质</h3><p>好了，有了上面这些的工具后，是时候考虑如何建立一条可靠的隧道了，这条隧道应该具有以下性质：</p><ol><li>机密性：密文无法被窃听者理解</li><li>完整性：密文没有被恶意篡改</li><li>端点鉴别：通信双方都要能证实另一方的身份</li></ol><p>接下来开始头脑风暴！</p><h1 id="如何创立可靠的加密信道"><a href="#如何创立可靠的加密信道" class="headerlink" title="如何创立可靠的加密信道"></a>如何创立可靠的加密信道</h1><p>现在设想一台主机 $C$，它现在要去访问名叫 <code>www.example.com</code> 的服务器，开始构想一种方式使它与服务器的通信免受骇客的侵扰吧！</p><h3 id="加密1-0：使用对称加密"><a href="#加密1-0：使用对称加密" class="headerlink" title="加密1.0：使用对称加密"></a>加密1.0：使用对称加密</h3><p>主机 $C$ 运气很好，它一开始就和 <code>www.example.com</code> 拥有同样的（而且只有它们俩知道）对称加密密钥，那事情变得非常简单了，直接使用密钥加密就能保证安全</p><blockquote><p>$client\stackrel{K(p)}{\Longleftarrow&#x3D;&#x3D;\Longrightarrow}server$</p></blockquote><p>但是这种情况是极其少见的，在很多情况下，主机 $C$ 可能是首次和 <code>www.example.com</code> 取得联系<br>并且由一方生成密钥并传输过去也是不行的，在公网上明文传输密钥是极可能被骇客截获，以后的通信就毫无安全可言了</p><h3 id="加密2-0：使用不对称加密"><a href="#加密2-0：使用不对称加密" class="headerlink" title="加密2.0：使用不对称加密"></a>加密2.0：使用不对称加密</h3><p>那么使用不对称加密又如何呢？比如由服务器分发公钥（公钥是可以被任何人知道的），这样主机 $C$ 可以在本地生成对称加密的密钥 $k$，并使用公钥加密传递给服务器了</p><blockquote><p>$client\stackrel{K^+(k)}{&#x3D;&#x3D;&#x3D;\Longrightarrow}server$</p></blockquote><p>很不幸，一个聪明的骇客拦截了服务器发往主机 $C$ 的公钥 $K_{s}^+$，并替换为自己的公钥 $K_{h}^+$，如此，密钥就能被骇客截获</p><blockquote><p>$client\stackrel{K_{h}^{+}(k)}{&#x3D;&#x3D;&#x3D;&#x3D;\Longrightarrow}cracker\stackrel{K_{s}^{+}(k)}{&#x3D;&#x3D;&#x3D;&#x3D;\Longrightarrow}server$</p></blockquote><h3 id="加密3-0：引入-CA"><a href="#加密3-0：引入-CA" class="headerlink" title="加密3.0：引入 CA"></a>加密3.0：引入 CA</h3><p>实际上可以注意到，如果主机 $C$ 除对域名 <code>www.example.com</code> 外，对要访问的服务器一无所知的话，任何加密都是无法验证服务器身份的。就好比你声称要见一个叫“小明”的人，而完全不知道其声音、外貌等等，那么任何人都可以声称自己是“小明”来欺骗你</p><p>但在实际中，主机要去访问一个第一次知道的网站的情况十分常见，<del>比如你现在多半也是第一次见到这个域名，进入笔者的博客</del></p><p>那么，一种自然的想法就是，既然你不可能认识世界上所有人，那么为了保证你见到的人就是“小明”，需要一个神通广大且可靠的朋友作为中介。而在计算机网络里，这个中介就是<a href="https://zh.wikipedia.org/zh-sg/%E8%AF%81%E4%B9%A6%E9%A2%81%E5%8F%91%E6%9C%BA%E6%9E%84">CA</a>（数字证书认证机构，Certificate Authority）</p><h4 id="CA-如何验证身份？"><a href="#CA-如何验证身份？" class="headerlink" title="CA 如何验证身份？"></a>CA 如何验证身份？</h4><p>事实上是，当主机 C 要访问 <code>www.example.com</code> 时，并不会事先去联系 CA（想象一下全世界那么多主机每次访问网站前都要联系 CA 是多么可怕的事），而是由网站的服务器给出 CA 颁发的证书（digital certificate），这“张”证书包含以下数据：</p><ul><li>CA 机构的名称</li><li>服务器的域名</li><li>服务器公钥</li><li>证书的数字签名</li><li>证书的有效期</li><li>其他（主要是协议版本和加解密算法等等）</li></ul><p>那么当主机 $C$ 收到这张证书时会干什么事呢？首先，它会使用证书上的对应 CA 的公钥解密数字签名并验证证书，确定证书的有效性后，提取服务器域名和公钥，后续就可以使用该公钥传递对称加密密钥建立加密信道了</p><p>但是这里似乎有个疑惑，CA 的公钥是从哪里来的呢？答案是，<strong>内置</strong>！在安装浏览器&#x2F;操作系统时，会自带可信任的 CA 名称及其公钥，这样即可达成信任链，完成对证书的验证</p><ul><li>由于 CA 机构的地位，某些流氓浏览器可能会内置一些不具有权威性的 CA，请勿使用除Edge，Chrome，Firefox等大厂以外的浏览器！</li><li>某些恶意软件取得操作系统管理员权限后，也可能安装信任一些不友好的证书！</li><li>一旦信任链一环出现问题，黑客就有可能做到窃听乃至劫持！</li></ul><h4 id="CA机构的风险"><a href="#CA机构的风险" class="headerlink" title="CA机构的风险"></a>CA机构的风险</h4><p>在上述过程中，不难察觉到 CA 的权力过于集中，不免引起人们的担忧：一旦 CA 作恶，后果不堪设想</p><p>CA 可能的风险：</p><ol><li><a href="https://security.googleblog.com/2015/10/sustaining-digital-certificate-security.html">机构人员因某些原因（失误或腐败接受贿赂等）颁发伪造证书</a></li><li>CA 遭受骇客入侵，伪造证书</li><li>CA 受政府压力，给予伪造证书（棱镜门事件中，美国政府可能强迫 CA 为他们颁发假证书）</li></ol><p>关键是，一个中心化的机构总是无法避免此类情况的发生，人们无法完全相信一个集权的机构</p><h3 id="加密4-0：CT制度"><a href="#加密4-0：CT制度" class="headerlink" title="加密4.0：CT制度"></a>加密4.0：CT制度</h3><p><a href="https://zh.wikipedia.org/zh-cn/%E8%AF%81%E4%B9%A6%E9%80%8F%E6%98%8E%E5%BA%A6">CT</a>（证书透明，Certificate Transparency），通过将证书颁发等操作公开，受任何人监督，达到无法篡改和伪造证书的目的</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>如此一来，一条加密信道就在理论上建立起来了</p><p>下面笔者可能（<del>也可能没有，咕咕咕</del>）会花几篇的文章详细讲解 TLS 的具体技术细节，通过预演可能遭到的攻击来梳理 TLS 各种设计的逻辑，敬请期待吧</p>]]></content>
    
    
    <categories>
      
      <category>技术鉴赏</category>
      
      <category>TLS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Network</tag>
      
      <tag>TLS</tag>
      
      <tag>Secure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>折腾tproxy下的一点踩坑</title>
    <link href="/posts/%E6%8A%98%E8%85%BEtproxy%E4%B8%8B%E7%9A%84%E4%B8%80%E7%82%B9%E8%B8%A9%E5%9D%91/"/>
    <url>/posts/%E6%8A%98%E8%85%BEtproxy%E4%B8%8B%E7%9A%84%E4%B8%80%E7%82%B9%E8%B8%A9%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>其实早在三天前我就打算写出第一篇博客了，但是由于我国互联网的特殊性，导致安装 hexo 出现了“一点点”小意外。虽然只需要设置一下命令行代理就能搞定</p><p><code>set http_proxy=http://ip:port</code></p><p>但是这件事给我了足够的动力去折腾透明网关。<del>其实早就想搞的，拖延症+懒，就。。。</del></p><h1 id="技术介绍"><a href="#技术介绍" class="headerlink" title="技术介绍"></a>技术介绍</h1><p>tproxy，意为透明代理&#x2F;透明网关，通过在路由器上运行代理软件并劫持局域网内所有流量便可实现局域网设备“无感”翻墙</p><p>它相对与传统的 http 代理或者 sock 代理有以下优点：</p><ol><li>使不支持设置代理的设备翻墙，例如 apple TV，switch等</li><li>使不遵守系统代理的软件走代理</li><li>对代理设备透明，无需对局域网中设备做任何调整</li></ol><ul><li>如果仅是第二条的话，利用 tun 模式即可实现，但这就不在本文的范围内了，请自行查阅相关资料</li><li>目前有许多十分完善的代理插件，如 <a href="https://github.com/vernesong/OpenClash">openclash</a> <a href="https://github.com/jerrykuku/luci-app-vssr">helloworld</a> <a href="https://github.com/xiaorouji/openwrt-passwall">passwall</a> 等，如果你<strong>不</strong>熟悉Linux操作&#x2F;善用Google&#x2F;懂得<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/main/README-zh_CN.md">提问的智慧</a>，请直接使用插件</li></ul><h1 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h1><p>本文主要参考 <a href="https://xtls.github.io/document/level-2/transparent_proxy/transparent_proxy.html">这个</a>，本文并不打算复述该文章的内容，仅仅对该文没讲到的地方做出补充。特别的，我并没有将网关纳入透明代理中，因为我觉得没必要且相当麻烦（需要排除xray的出站流量）</p><p>总之，我最后的iptables配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>ip rule add fwmark 1 table 100<br>ip route add <span class="hljs-built_in">local</span> 0.0.0.0/0 dev lo table 100<br>iptables -t mangle -N XRAY<br>iptables -t mangle -A XRAY -d 10.0.0.0/8 -j RETURN<br>iptables -t mangle -A XRAY -d 100.64.0.0/10 -j RETURN<br>iptables -t mangle -A XRAY -d 127.0.0.0/8 -j RETURN<br>iptables -t mangle -A XRAY -d 169.254.0.0/16 -j RETURN<br>iptables -t mangle -A XRAY -d 172.16.0.0/12 -j RETURN<br>iptables -t mangle -A XRAY -d 224.0.0.0/3 -j RETURN<br>iptables -t mangle -A XRAY -d 255.255.255.255/32 -j RETURN<br>iptables -t mangle -A XRAY ! -s 192.168.0.0/16 -j RETURN<br>iptables -t mangle -A XRAY -d 192.168.0.0/16 -p tcp -j RETURN<br>iptables -t mangle -A XRAY -d 192.168.0.0/16 -p udp ! --dport 53 -j RETURN<br>iptables -t mangle -A XRAY -p tcp -j TPROXY --on-port 12345 --tproxy-mark 1<br>iptables -t mangle -A XRAY -p udp -j TPROXY --on-port 12345 --tproxy-mark 1<br>iptables -t mangle -A PREROUTING -j XRAY<br><br><span class="hljs-built_in">sleep</span> 10<br><br>ipv6=$(ip -6 route show dev lo)<br>ipv6_CIDR=<span class="hljs-variable">$&#123;ipv6: 12: 24&#125;</span><br>ip -6 rule add fwmark 1 table 106<br>ip -6 route add <span class="hljs-built_in">local</span> ::/0 dev lo table 106<br>ip6tables -t mangle -N XRAY6<br>ip6tables -t mangle -A XRAY6 -d ::1/128 -j RETURN<br>ip6tables -t mangle -A XRAY6 -d fe80::/10 -j RETURN<br>ip6tables -t mangle -A XRAY6 ! -s <span class="hljs-variable">$&#123;ipv6_CIDR&#125;</span> -j RETURN<br>ip6tables -t mangle -A XRAY6 -d <span class="hljs-variable">$&#123;ipv6_CIDR&#125;</span> -p tcp -j RETURN<br>ip6tables -t mangle -A XRAY6 -d <span class="hljs-variable">$&#123;ipv6_CIDR&#125;</span> -p udp ! --dport 53 -j RETURN<br>ip6tables -t mangle -A XRAY6 -p udp -j TPROXY --on-port 12345 --tproxy-mark 1<br>ip6tables -t mangle -A XRAY6 -p tcp -j TPROXY --on-port 12345 --tproxy-mark 1<br>ip6tables -t mangle -A PREROUTING -j XRAY6<br></code></pre></td></tr></table></figure><h2 id="与参考文章相比，我做出哪些改变？"><a href="#与参考文章相比，我做出哪些改变？" class="headerlink" title="与参考文章相比，我做出哪些改变？"></a>与参考文章相比，我做出哪些改变？</h2><p>事实上，我主要增加了 ipv6 的部分，即便是 <a href="https://xtls.github.io/document/level-2/tproxy_ipv4_and_ipv6.html">这篇</a>，也仅仅针对使用 nat6 的网络，我相信使用 ipv6 肯定是图它全球单播的优点，不然我觉得直接关闭 ipv6 是更省事的做法（使用 fd00::&#x2F;8 是 unacceptable！！！）<br>但是针对我国 ISP 使用的动态 ipv6-pd 的问题，每次重新拨号都会使前缀变化，网段肯定不能写死在配置里，因此随系统启动时要能主动获取当前的网段：</p><ol><li>运行<code>ip -6 route show dev lo</code>获取本机的 ipv6 网段信息</li><li><code>ipv6_CIDR=$&#123;ipv6: 12: 24&#125;</code>截取网段信息</li></ol><ul><li>注意<code>ip -6 route show dev lo</code>时可能会返回多个 ipv6 地址，注意区分哪个是 pd 前缀</li><li><code>sleep 10</code>是为了等待 pppoe 拨号，拨号后才可能下发前缀</li></ul><h1 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h1><p>实际上，调 iptables 的配置，不能说是一番风顺吧，只能说是举步维艰<br>一些很快被发现的小问题就不说了。<del>几次写错 iptables 的规则导致 ssh 都访问不到路由器，只能断电重启</del></p><p>一开始，我对 DNS 的处理是这样的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -t mangle -A XRAY -d 192.168.0.0/16 -p tcp ! --dport 53 -j RETURN<br>iptables -t mangle -A XRAY -d 192.168.0.0/16 -p udp ! --dport 53 -j RETURN<br></code></pre></td></tr></table></figure><p>而我的 xray 路由中却是只有</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;field&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;inboundTag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;all-in&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">53</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;network&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;udp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;outboundTag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dns-out&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>这就导致了局域网请求 TCP 53 时，走了<code>direct</code>，这条DNS出了 xray 又进了系统 DNS 查询，系统就先对自己的 TCP 53 端口进行了 DNS 查询，于是这条 DNS 又进了 xray，在这种递归之下，很快，xray 日志里出现了大量这样的日志</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">2023/07/26</span> <span class="hljs-number">14:12:10 192</span>.<span class="hljs-number">168.2.2</span>:<span class="hljs-number">59754</span> accepted udp:<span class="hljs-number">192.168.2.1</span>:<span class="hljs-number">53</span> [all-in -&gt; dns-out]   //udp 请求就不会，因为它正常的路由到了 dns-out<br><span class="hljs-number">2023/07/26</span> <span class="hljs-number">14:12:10 192</span>.<span class="hljs-number">168.2.2</span>:<span class="hljs-number">51312</span> accepted tcp:<span class="hljs-number">192.168.2.1</span>:<span class="hljs-number">53</span> [all-in -&gt; direct]    //这条开始引起了下面反复请求<br><span class="hljs-number">2023/07/26</span> <span class="hljs-number">14:12:10 192</span>.<span class="hljs-number">168.2.1</span>:<span class="hljs-number">34072</span> accepted tcp:<span class="hljs-number">192.168.2.1</span>:<span class="hljs-number">53</span> [all-in -&gt; direct]    //这样的请求在实际日志中持续了上百条，这里只是节选<br><span class="hljs-number">2023/07/26</span> <span class="hljs-number">14:12:10 192</span>.<span class="hljs-number">168.2.1</span>:<span class="hljs-number">34080</span> accepted tcp:<span class="hljs-number">192.168.2.1</span>:<span class="hljs-number">53</span> [all-in -&gt; direct]<br><span class="hljs-number">2023/07/26</span> <span class="hljs-number">14:12:10 192</span>.<span class="hljs-number">168.2.1</span>:<span class="hljs-number">34094</span> accepted tcp:<span class="hljs-number">192.168.2.1</span>:<span class="hljs-number">53</span> [all-in -&gt; direct]<br></code></pre></td></tr></table></figure><p>在这之后不久，软路由系统就卡死，网络完全崩了</p><p><del>当时看了半天 iptables 的原理，脑子完全僵住了，还以为是 xray 的问题，还去提了个 issue</del></p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>折腾这玩意最好先在其他设备调好再转到主路由上去，<del>否则可能引起家庭矛盾</del>，而且这一套规则可能之后还会再调，目前还发现了不少小问题</p><p>emmmmm，以后再写吧！</p>]]></content>
    
    
    <categories>
      
      <category>记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Network</tag>
      
      <tag>Tproxy</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
